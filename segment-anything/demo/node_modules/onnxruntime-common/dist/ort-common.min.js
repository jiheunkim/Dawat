/*!
 * ONNX Runtime Common v1.16.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ort=t():e.ort=t()}(self,(()=>(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{InferenceSession:()=>h,Tensor:()=>c,env:()=>s,registerBackend:()=>o});const r={},n=[],o=(e,t,o)=>{if(!t||"function"!=typeof t.init||"function"!=typeof t.createSessionHandler)throw new TypeError("not a valid backend");{const i=r[e];if(void 0===i)r[e]={backend:t,priority:o};else{if(i.priority>o)return;if(i.priority===o&&i.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${o}`)}if(o>=0){const t=n.indexOf(e);-1!==t&&n.splice(t,1);for(let t=0;t<n.length;t++)if(r[n[t]].priority<=o)return void n.splice(t,0,e);n.push(e)}}};let i="warning";const a={wasm:{},webgl:{},webgpu:{},versions:{common:"1.16.0"},set logLevel(e){if(void 0!==e){if("string"!=typeof e||-1===["verbose","info","warning","error","fatal"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);i=e}},get logLevel(){return i}};Object.defineProperty(a,"logLevel",{enumerable:!0});const s=a,d=(e,t)=>{var r,n,o;if(void 0===e)throw new Error("Image buffer must be defined");if(void 0===t.height||void 0===t.width)throw new Error("Image height and width must be defined");if("NHWC"===t.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");const{height:i,width:a}=t,s=null!==(r=t.norm)&&void 0!==r?r:{mean:255,bias:0};let d,f;d="number"==typeof s.mean?[s.mean,s.mean,s.mean,s.mean]:[s.mean[0],s.mean[1],s.mean[2],null!==(n=s.mean[3])&&void 0!==n?n:255],f="number"==typeof s.bias?[s.bias,s.bias,s.bias,s.bias]:[s.bias[0],s.bias[1],s.bias[2],null!==(o=s.bias[3])&&void 0!==o?o:0];const m=void 0!==t.format?t.format:"RGBA",l=void 0!==t.tensorFormat&&void 0!==t.tensorFormat?t.tensorFormat:"RGB",u=i*a,h="RGBA"===l?new Float32Array(4*u):new Float32Array(3*u);let y=4,g=0,p=1,w=2,b=3,v=0,A=u,E=2*u,I=-1;"RGB"===m&&(y=3,g=0,p=1,w=2,b=-1),"RGBA"===l?I=3*u:"RBG"===l?(v=0,E=u,A=2*u):"BGR"===l&&(E=0,A=u,v=2*u);for(let t=0;t<u;t++,g+=y,w+=y,p+=y,b+=y)h[v++]=(e[g]+f[0])/d[0],h[A++]=(e[p]+f[1])/d[1],h[E++]=(e[w]+f[2])/d[2],-1!==I&&-1!==b&&(h[I++]=(e[b]+f[3])/d[3]);return new c("float32",h,"RGBA"===l?[1,4,i,a]:[1,3,i,a])},f=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),m=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let l=!1;const c=class{constructor(e,t,r){let n,o,i;if((()=>{if(!l){l=!0;const e="undefined"!=typeof BigInt64Array&&"function"==typeof BigInt64Array.from,t="undefined"!=typeof BigUint64Array&&"function"==typeof BigUint64Array.from;e&&(f.set("int64",BigInt64Array),m.set(BigInt64Array,"int64")),t&&(f.set("uint64",BigUint64Array),m.set(BigUint64Array,"uint64"))}})(),"string"==typeof e)if(n=e,i=r,"string"===e){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");o=t}else{const r=f.get(e);if(void 0===r)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if("float16"===e)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");o="uint64"===e||"int64"===e?r.from(t,BigInt):r.from(t)}else{if(!(t instanceof r))throw new TypeError(`A ${n} tensor's data must be type of ${r}`);o=t}}else if(i=t,Array.isArray(e)){if(0===e.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");const t=typeof e[0];if("string"===t)n="string",o=e;else{if("boolean"!==t)throw new TypeError(`Invalid element type of data array: ${t}.`);n="bool",o=Uint8Array.from(e)}}else{const t=m.get(e.constructor);if(void 0===t)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=t,o=e}if(void 0===i)i=[o.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");const a=(e=>{let t=1;for(let r=0;r<e.length;r++){const n=e[r];if("number"!=typeof n||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t})(i);if(a!==o.length)throw new Error(`Tensor's size(${a}) does not match data length(${o.length}).`);this.dims=i,this.type=n,this.data=o,this.size=a}static async fromImage(e,t){return(async(e,t)=>{const r="undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement,n="undefined"!=typeof ImageData&&e instanceof ImageData,o="undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap,i="string"==typeof e;let a,s=null!=t?t:{};if(r){const r=document.createElement("canvas");r.width=e.width,r.height=e.height;const n=r.getContext("2d");if(null==n)throw new Error("Can not access image data");{let r=e.height,o=e.width;if(void 0!==t&&void 0!==t.resizedHeight&&void 0!==t.resizedWidth&&(r=t.resizedHeight,o=t.resizedWidth),void 0!==t){if(s=t,void 0!==t.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");s.tensorFormat="RGBA",s.height=r,s.width=o}else s.tensorFormat="RGBA",s.height=r,s.width=o;n.drawImage(e,0,0),a=n.getImageData(0,0,o,r).data}}else{if(!n){if(o){if(void 0===t)throw new Error("Please provide image config with format for Imagebitmap");const r=document.createElement("canvas");r.width=e.width,r.height=e.height;const n=r.getContext("2d");if(null!=n){const t=e.height,r=e.width;return n.drawImage(e,0,0,r,t),a=n.getImageData(0,0,r,t).data,s.height=t,s.width=r,d(a,s)}throw new Error("Can not access image data")}if(i)return new Promise(((t,r)=>{const n=document.createElement("canvas"),o=n.getContext("2d");if(!e||!o)return r();const i=new Image;i.crossOrigin="Anonymous",i.src=e,i.onload=()=>{n.width=i.width,n.height=i.height,o.drawImage(i,0,0,n.width,n.height);const e=o.getImageData(0,0,n.width,n.height);s.height=n.height,s.width=n.width,t(d(e.data,s))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let r,n;if(void 0!==t&&void 0!==t.resizedWidth&&void 0!==t.resizedHeight?(r=t.resizedHeight,n=t.resizedWidth):(r=e.height,n=e.width),void 0!==t&&(s=t),s.format="RGBA",s.height=r,s.width=n,void 0!==t){const t=document.createElement("canvas");t.width=n,t.height=r;const o=t.getContext("2d");if(null==o)throw new Error("Can not access image data");o.putImageData(e,0,0),a=o.getImageData(0,0,n,r).data}else a=e.data}}if(void 0!==a)return d(a,s);throw new Error("Input data provided is not supported - aborted tensor creation")})(e,t)}toDataURL(e){return((e,t)=>{const r=document.createElement("canvas");r.width=e.dims[3],r.height=e.dims[2];const n=r.getContext("2d");if(null!=n){let o,i;void 0!==(null==t?void 0:t.tensorLayout)&&"NHWC"===t.tensorLayout?(o=e.dims[2],i=e.dims[3]):(o=e.dims[3],i=e.dims[2]);const a=void 0!==(null==t?void 0:t.format)?t.format:"RGB",s=null==t?void 0:t.norm;let d,f;void 0===s||void 0===s.mean?d=[255,255,255,255]:"number"==typeof s.mean?d=[s.mean,s.mean,s.mean,s.mean]:(d=[s.mean[0],s.mean[1],s.mean[2],0],void 0!==s.mean[3]&&(d[3]=s.mean[3])),void 0===s||void 0===s.bias?f=[0,0,0,0]:"number"==typeof s.bias?f=[s.bias,s.bias,s.bias,s.bias]:(f=[s.bias[0],s.bias[1],s.bias[2],0],void 0!==s.bias[3]&&(f[3]=s.bias[3]));const m=i*o;let l=0,c=m,u=2*m,h=-1;"RGBA"===a?(l=0,c=m,u=2*m,h=3*m):"RGB"===a?(l=0,c=m,u=2*m):"RBG"===a&&(l=0,u=m,c=2*m);for(let t=0;t<i;t++)for(let r=0;r<o;r++){const o=(e.data[l++]-f[0])*d[0],i=(e.data[c++]-f[1])*d[1],a=(e.data[u++]-f[2])*d[2],s=-1===h?255:(e.data[h++]-f[3])*d[3];n.fillStyle="rgba("+o+","+i+","+a+","+s+")",n.fillRect(r,t,1,1)}return r.toDataURL()}throw new Error("Can not access image data")})(this,e)}toImageData(e){return((e,t)=>{const r=document.createElement("canvas").getContext("2d");let n;if(null==r)throw new Error("Can not access image data");{let o,i,a;void 0!==(null==t?void 0:t.tensorLayout)&&"NHWC"===t.tensorLayout?(o=e.dims[2],i=e.dims[1],a=e.dims[3]):(o=e.dims[3],i=e.dims[2],a=e.dims[1]);const s=void 0!==t&&void 0!==t.format?t.format:"RGB",d=null==t?void 0:t.norm;let f,m;void 0===d||void 0===d.mean?f=[255,255,255,255]:"number"==typeof d.mean?f=[d.mean,d.mean,d.mean,d.mean]:(f=[d.mean[0],d.mean[1],d.mean[2],255],void 0!==d.mean[3]&&(f[3]=d.mean[3])),void 0===d||void 0===d.bias?m=[0,0,0,0]:"number"==typeof d.bias?m=[d.bias,d.bias,d.bias,d.bias]:(m=[d.bias[0],d.bias[1],d.bias[2],0],void 0!==d.bias[3]&&(m[3]=d.bias[3]));const l=i*o;if(void 0!==t&&(void 0!==t.format&&4===a&&"RGBA"!==t.format||3===a&&"RGB"!==t.format&&"BGR"!==t.format))throw new Error("Tensor format doesn't match input tensor dims");const c=4;let u=0,h=1,y=2,g=3,p=0,w=l,b=2*l,v=-1;"RGBA"===s?(p=0,w=l,b=2*l,v=3*l):"RGB"===s?(p=0,w=l,b=2*l):"RBG"===s&&(p=0,b=l,w=2*l),n=r.createImageData(o,i);for(let t=0;t<i*o;u+=c,h+=c,y+=c,g+=c,t++)n.data[u]=(e.data[p++]-m[0])*f[0],n.data[h]=(e.data[w++]-m[1])*f[1],n.data[y]=(e.data[b++]-m[2])*f[2],n.data[g]=-1===v?255:(e.data[v++]-m[3])*f[3]}return n})(this,e)}reshape(e){return((e,t)=>new c(e.type,e.data,t))(this,e)}};class u{constructor(e){this.handler=e}async run(e,t,r){const n={};let o={};if("object"!=typeof e||null===e||e instanceof c||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if("object"==typeof t){if(null===t)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof c)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(0===t.length)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(const e of t){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);n[e]=null}if("object"==typeof r&&null!==r)o=r;else if(void 0!==r)throw new TypeError("'options' must be an object.")}else{let e=!1;const a=Object.getOwnPropertyNames(t);for(const r of this.outputNames)if(-1!==a.indexOf(r)){const o=t[r];(null===o||o instanceof c)&&(e=!0,i=!1,n[r]=o)}if(e){if("object"==typeof r&&null!==r)o=r;else if(void 0!==r)throw new TypeError("'options' must be an object.")}else o=t}}else if(void 0!==t)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const t of this.inputNames)if(void 0===e[t])throw new Error(`input '${t}' is missing in 'feeds'.`);if(i)for(const e of this.outputNames)n[e]=null;const a=await this.handler.run(e,n,o),s={};for(const e in a)Object.hasOwnProperty.call(a,e)&&(s[e]=new c(a[e].type,a[e].data,a[e].dims));return s}async release(){return this.handler.dispose()}static async create(e,t,o,i){let a,s={};if("string"==typeof e){if(a=e,"object"==typeof t&&null!==t)s=t;else if(void 0!==t)throw new TypeError("'options' must be an object.")}else if(e instanceof Uint8Array){if(a=e,"object"==typeof t&&null!==t)s=t;else if(void 0!==t)throw new TypeError("'options' must be an object.")}else{if(!(e instanceof ArrayBuffer||"undefined"!=typeof SharedArrayBuffer&&e instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{const r=e;let n=0,d=e.byteLength;if("object"==typeof t&&null!==t)s=t;else if("number"==typeof t){if(n=t,!Number.isSafeInteger(n))throw new RangeError("'byteOffset' must be an integer.");if(n<0||n>=r.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${r.byteLength}).`);if(d=e.byteLength-n,"number"==typeof o){if(d=o,!Number.isSafeInteger(d))throw new RangeError("'byteLength' must be an integer.");if(d<=0||n+d>r.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${r.byteLength-n}].`);if("object"==typeof i&&null!==i)s=i;else if(void 0!==i)throw new TypeError("'options' must be an object.")}else if(void 0!==o)throw new TypeError("'byteLength' must be a number.")}else if(void 0!==t)throw new TypeError("'options' must be an object.");a=new Uint8Array(r,n,d)}}const d=(s.executionProviders||[]).map((e=>"string"==typeof e?e:e.name)),f=await(async e=>{const t=0===e.length?n:e,o=[];for(const e of t){const t=r[e];if(t){if(t.initialized)return t.backend;if(t.aborted)continue;const r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init()),await t.initPromise,t.initialized=!0,t.backend}catch(n){r||o.push({name:e,err:n}),t.aborted=!0}finally{delete t.initPromise}}}throw new Error(`no available backend found. ERR: ${o.map((e=>`[${e.name}] ${e.err}`)).join(", ")}`)})(d),m=await f.createSessionHandler(a,s);return new u(m)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}const h=u;return t})()));
//# sourceMappingURL=ort-common.min.js.map