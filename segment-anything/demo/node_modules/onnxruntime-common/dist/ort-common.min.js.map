{"version":3,"file":"ort-common.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/./lib/backend-impl.ts","webpack://ort/./lib/env-impl.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/env.ts","webpack://ort/./lib/tensor-factory-impl.ts","webpack://ort/./lib/tensor-impl.ts","webpack://ort/./lib/tensor.ts","webpack://ort/./lib/tensor-utils-impl.ts","webpack://ort/./lib/tensor-conversion-impl.ts","webpack://ort/./lib/inference-session-impl.ts","webpack://ort/./lib/inference-session.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend} from './backend.js';\n\ninterface BackendInfo {\n  backend: Backend;\n  priority: number;\n\n  initPromise?: Promise<void>;\n  initialized?: boolean;\n  aborted?: boolean;\n}\n\nconst backends: {[name: string]: BackendInfo} = {};\nconst backendsSortedByPriority: string[] = [];\n\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name: string, backend: Backend, priority: number): void => {\n  if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n    const currentBackend = backends[name];\n    if (currentBackend === undefined) {\n      backends[name] = {backend, priority};\n    } else if (currentBackend.priority > priority) {\n      // same name is already registered with a higher priority. skip registeration.\n      return;\n    } else if (currentBackend.priority === priority) {\n      if (currentBackend.backend !== backend) {\n        throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n      }\n    }\n\n    if (priority >= 0) {\n      const i = backendsSortedByPriority.indexOf(name);\n      if (i !== -1) {\n        backendsSortedByPriority.splice(i, 1);\n      }\n\n      for (let i = 0; i < backendsSortedByPriority.length; i++) {\n        if (backends[backendsSortedByPriority[i]].priority <= priority) {\n          backendsSortedByPriority.splice(i, 0, name);\n          return;\n        }\n      }\n      backendsSortedByPriority.push(name);\n    }\n    return;\n  }\n\n  throw new TypeError('not a valid backend');\n};\n\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async(backendHints: readonly string[]): Promise<Backend> => {\n  const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n  const errors = [];\n  for (const backendName of backendNames) {\n    const backendInfo = backends[backendName];\n    if (backendInfo) {\n      if (backendInfo.initialized) {\n        return backendInfo.backend;\n      } else if (backendInfo.aborted) {\n        continue;  // current backend is unavailable; try next\n      }\n\n      const isInitializing = !!backendInfo.initPromise;\n      try {\n        if (!isInitializing) {\n          backendInfo.initPromise = backendInfo.backend.init();\n        }\n        await backendInfo.initPromise;\n        backendInfo.initialized = true;\n        return backendInfo.backend;\n      } catch (e) {\n        if (!isInitializing) {\n          errors.push({name: backendName, err: e});\n        }\n        backendInfo.aborted = true;\n      } finally {\n        delete backendInfo.initPromise;\n      }\n    }\n  }\n\n  throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from './env.js';\nimport {version} from './version.js';\n\ntype LogLevelType = Env['logLevel'];\n\nlet logLevelValue: Required<LogLevelType> = 'warning';\n\nexport const env: Env = {\n  wasm: {} as Env.WebAssemblyFlags,\n  webgl: {} as Env.WebGLFlags,\n  webgpu: {} as Env.WebGpuFlags,\n  versions: {common: version},\n\n  set logLevel(value: LogLevelType) {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n      throw new Error(`Unsupported logging level: ${value}`);\n    }\n    logLevelValue = value;\n  },\n  get logLevel(): Required<LogLevelType> {\n    return logLevelValue;\n  },\n};\n\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(env, 'logLevel', {enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.16.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env as envImpl} from './env-impl.js';\n\nexport declare namespace Env {\n  export type WasmPrefixOrFilePaths = string|{\n    /* eslint-disable @typescript-eslint/naming-convention */\n    'ort-wasm.wasm'?: string;\n    'ort-wasm-threaded.wasm'?: string;\n    'ort-wasm-simd.wasm'?: string;\n    'ort-wasm-simd-threaded.wasm'?: string;\n    /* eslint-enable @typescript-eslint/naming-convention */\n  };\n  export interface WebAssemblyFlags {\n    /**\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\n     * to 1, no worker thread will be spawned.\n     *\n     * This setting is available only when WebAssembly multithread feature is available in current context.\n     *\n     * @defaultValue `0`\n     */\n    numThreads?: number;\n\n    /**\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\n     *\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\n     *\n     * @defaultValue `true`\n     */\n    simd?: boolean;\n\n    /**\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\n     * value indicates no timeout is set.\n     *\n     * @defaultValue `0`\n     */\n    initTimeout?: number;\n\n    /**\n     * Set a custom URL prefix to the .wasm files or a set of overrides for each .wasm file. The override path should be\n     * an absolute path.\n     */\n    wasmPaths?: WasmPrefixOrFilePaths;\n\n    /**\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\n     *\n     * @defaultValue `false`\n     */\n    proxy?: boolean;\n  }\n\n  export interface WebGLFlags {\n    /**\n     * Set or get the WebGL Context ID (webgl or webgl2).\n     *\n     * @defaultValue `'webgl2'`\n     */\n    contextId?: 'webgl'|'webgl2';\n    /**\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\n     *\n     * @deprecated\n     */\n    matmulMaxBatchSize?: number;\n    /**\n     * Set or get the texture cache mode.\n     *\n     * @defaultValue `'full'`\n     */\n    textureCacheMode?: 'initializerOnly'|'full';\n    /**\n     * Set or get the packed texture mode\n     *\n     * @defaultValue `false`\n     */\n    pack?: boolean;\n    /**\n     * Set or get whether enable async download.\n     *\n     * @defaultValue `false`\n     */\n    async?: boolean;\n  }\n\n  export interface WebGpuFlags {\n    profilingMode?: 'off'|'default';\n  }\n}\n\nexport interface Env {\n  /**\n   * set the severity level for logging.\n   *\n   * @defaultValue `'warning'`\n   */\n  logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal';\n  /**\n   * Indicate whether run in debug mode.\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n\n  /**\n   * Get version of the current package.\n   */\n  readonly versions: {\n    common: string;\n    web?: string;\n    node?: string;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'react-native'?: string;\n  };\n\n  /**\n   * Represent a set of flags for WebAssembly\n   */\n  wasm: Env.WebAssemblyFlags;\n\n  /**\n   * Represent a set of flags for WebGL\n   */\n  webgl: Env.WebGLFlags;\n\n  /**\n   * Represent a set of flags for WebGPU\n   */\n  webgpu: Env.WebGpuFlags;\n\n  [name: string]: unknown;\n}\n\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env: Env = envImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OptionsDimensions, OptionsFormat, OptionsNormalizationParameters, OptionsTensorFormat, OptionsTensorLayout, TensorFromImageBitmapOptions, TensorFromImageDataOptions, TensorFromImageElementOptions, TensorFromUrlOptions} from './tensor-factory.js';\nimport {Tensor, TypedTensor} from './tensor.js';\n\ninterface BufferToTensorOptions extends OptionsDimensions, OptionsTensorLayout, OptionsNormalizationParameters,\n                                        OptionsFormat, OptionsTensorFormat {}\n\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nexport const bufferToTensor =\n    (buffer: Uint8ClampedArray|undefined, options: BufferToTensorOptions): TypedTensor<'float32'>|\n    TypedTensor<'uint8'> => {\n      if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n      }\n      if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n      }\n      if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n      }\n\n      const {height, width} = options;\n\n      const norm = options.norm ?? {mean: 255, bias: 0};\n      let normMean: [number, number, number, number];\n      let normBias: [number, number, number, number];\n\n      if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean![0], norm.mean![1], norm.mean![2], norm.mean![3] ?? 255];\n      }\n\n      if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias![0], norm.bias![1], norm.bias![2], norm.bias![3] ?? 0];\n      }\n\n      const inputformat = options.format !== undefined ? options.format : 'RGBA';\n      // default value is RGBA since imagedata and HTMLImageElement uses it\n\n      const outputformat = options.tensorFormat !== undefined ?\n          (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n          'RGB';\n      const stride = height * width;\n      const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n\n      // Default pointer assignments\n      let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n      let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n      // Updating the pointer assignments based on the input image format\n      if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n      }\n\n      // Updating the pointer assignments based on the output tensor format\n      if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n      } else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n      } else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n      }\n\n      for (let i = 0; i < stride;\n           i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n          float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n      }\n\n      // Float32Array -> ort.Tensor\n      const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n                                                     new Tensor('float32', float32Data, [1, 3, height, width]);\n      return outputTensor;\n    };\n\n/**\n * implementation of Tensor.fromImage().\n */\nexport const tensorFromImage = async(\n    image: ImageData|HTMLImageElement|ImageBitmap|string,\n    options?: TensorFromImageDataOptions|TensorFromImageElementOptions|TensorFromImageBitmapOptions|\n    TensorFromUrlOptions): Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>> => {\n  // checking the type of image object\n  const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n  const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n  const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n  const isString = typeof image === 'string';\n\n  let data: Uint8ClampedArray|undefined;\n  let bufferToTensorOptions: BufferToTensorOptions = options ?? {};\n\n  // filling and checking image configuration options\n  if (isHTMLImageEle) {\n    // HTMLImageElement - image object - format is RGBA by default\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = canvas.getContext('2d');\n\n    if (pixels2DContext != null) {\n      let height = image.height;\n      let width = image.width;\n      if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n        height = options.resizedHeight;\n        width = options.resizedWidth;\n      }\n\n      if (options !== undefined) {\n        bufferToTensorOptions = options;\n        if (options.tensorFormat !== undefined) {\n          throw new Error('Image input config format must be RGBA for HTMLImageElement');\n        } else {\n          bufferToTensorOptions.tensorFormat = 'RGBA';\n        }\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      } else {\n        bufferToTensorOptions.tensorFormat = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      }\n\n      pixels2DContext.drawImage(image, 0, 0);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isImageDataEle) {\n    let height: number;\n    let width: number;\n\n    if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n      height = options.resizedHeight;\n      width = options.resizedWidth;\n    } else {\n      height = image.height;\n      width = image.width;\n    }\n\n    if (options !== undefined) {\n      bufferToTensorOptions = options;\n    }\n    bufferToTensorOptions.format = 'RGBA';\n    bufferToTensorOptions.height = height;\n    bufferToTensorOptions.width = width;\n\n    if (options !== undefined) {\n      const tempCanvas = document.createElement('canvas');\n\n      tempCanvas.width = width;\n      tempCanvas.height = height;\n\n      const pixels2DContext = tempCanvas.getContext('2d');\n\n      if (pixels2DContext != null) {\n        pixels2DContext.putImageData(image, 0, 0);\n        data = pixels2DContext.getImageData(0, 0, width, height).data;\n      } else {\n        throw new Error('Can not access image data');\n      }\n    } else {\n      data = image.data;\n    }\n  } else if (isImageBitmap) {\n    // ImageBitmap - image object - format must be provided by user\n    if (options === undefined) {\n      throw new Error('Please provide image config with format for Imagebitmap');\n    }\n\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = canvas.getContext('2d');\n\n    if (pixels2DContext != null) {\n      const height = image.height;\n      const width = image.width;\n      pixels2DContext.drawImage(image, 0, 0, width, height);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n      bufferToTensorOptions.height = height;\n      bufferToTensorOptions.width = width;\n      return bufferToTensor(data, bufferToTensorOptions);\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isString) {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      if (!image || !context) {\n        return reject();\n      }\n      const newImage = new Image();\n      newImage.crossOrigin = 'Anonymous';\n      newImage.src = image;\n      newImage.onload = () => {\n        canvas.width = newImage.width;\n        canvas.height = newImage.height;\n        context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n        const img = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        bufferToTensorOptions.height = canvas.height;\n        bufferToTensorOptions.width = canvas.width;\n        resolve(bufferToTensor(img.data, bufferToTensorOptions));\n      };\n    });\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n\n  if (data !== undefined) {\n    return bufferToTensor(data, bufferToTensorOptions);\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {tensorToDataURL, tensorToImageData} from './tensor-conversion-impl.js';\nimport {TensorToDataUrlOptions, TensorToImageDataOptions} from './tensor-conversion.js';\nimport {tensorFromImage} from './tensor-factory-impl.js';\nimport {TensorFromImageBitmapOptions, TensorFromImageDataOptions, TensorFromImageElementOptions, TensorFromUrlOptions} from './tensor-factory.js';\nimport {calculateSize, tensorReshape} from './tensor-utils-impl.js';\nimport {Tensor as TensorInterface} from './tensor.js';\n\ntype TensorType = TensorInterface.Type;\ntype TensorDataType = TensorInterface.DataType;\n\ntype SupportedTypedArrayConstructors = Float32ArrayConstructor|Uint8ArrayConstructor|Int8ArrayConstructor|\n    Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|Uint8ArrayConstructor|\n    Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor;\ntype SupportedTypedArray = InstanceType<SupportedTypedArrayConstructors>;\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map<string, SupportedTypedArrayConstructors>([\n  ['float32', Float32Array],\n  ['uint8', Uint8Array],\n  ['int8', Int8Array],\n  ['uint16', Uint16Array],\n  ['float16', Uint16Array],\n  ['int16', Int16Array],\n  ['int32', Int32Array],\n  ['bool', Uint8Array],\n  ['float64', Float64Array],\n  ['uint32', Uint32Array],\n]);\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map<SupportedTypedArrayConstructors, TensorType>([\n  [Float32Array, 'float32'],\n  [Uint8Array, 'uint8'],\n  [Int8Array, 'int8'],\n  [Uint16Array, 'uint16'],\n  [Int16Array, 'int16'],\n  [Int32Array, 'int32'],\n  [Float64Array, 'float64'],\n  [Uint32Array, 'uint32'],\n]);\n\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n  if (!isBigIntChecked) {\n    isBigIntChecked = true;\n    const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n    const isBigUint64ArrayAvailable =\n        typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n\n    if (isBigInt64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n    }\n    if (isBigUint64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n    }\n  }\n};\n\n\nexport class Tensor implements TensorInterface {\n  // #region constructors\n  constructor(type: TensorType, data: TensorDataType|readonly number[]|readonly boolean[], dims?: readonly number[]);\n  constructor(data: TensorDataType|readonly boolean[], dims?: readonly number[]);\n  constructor(\n      arg0: TensorType|TensorDataType|readonly boolean[], arg1?: TensorDataType|readonly number[]|readonly boolean[],\n      arg2?: readonly number[]) {\n    checkBigInt();\n\n    let type: TensorType;\n    let data: TensorDataType;\n    let dims: typeof arg1|typeof arg2;\n    // check whether arg0 is type or data\n    if (typeof arg0 === 'string') {\n      //\n      // Override: constructor(type, data, ...)\n      //\n      type = arg0;\n      dims = arg2;\n      if (arg0 === 'string') {\n        // string tensor\n        if (!Array.isArray(arg1)) {\n          throw new TypeError('A string tensor\\'s data must be a string array.');\n        }\n        // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n        // error will be populated at inference\n        data = arg1;\n      } else {\n        // numeric tensor\n        const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n        if (typedArrayConstructor === undefined) {\n          throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n        }\n        if (Array.isArray(arg1)) {\n          if (arg0 === 'float16') {\n            // Throw error here because when user try to use number array as data,\n            // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n            // Uint16Array.from(arg1) which generates wrong data.\n            throw new TypeError(\n                'Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n          } else if (arg0 === 'uint64' || arg0 === 'int64') {\n            // use 'as any' here because:\n            // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n            // see https://github.com/microsoft/TypeScript/issues/17002\n            // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()' does\n            // not accept parameter mapFn.\n            // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n            // type.\n\n            // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data = (typedArrayConstructor as any).from(arg1, BigInt);\n          } else {\n            // assume 'arg1' is of type \"readonly number[]\" here.\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data = (typedArrayConstructor as any).from(arg1);\n          }\n        } else if (arg1 instanceof typedArrayConstructor) {\n          data = arg1;\n        } else {\n          throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n        }\n      }\n    } else {\n      //\n      // Override: constructor(data, ...)\n      //\n      dims = arg1;\n      if (Array.isArray(arg0)) {\n        // only boolean[] and string[] is supported\n        if (arg0.length === 0) {\n          throw new TypeError('Tensor type cannot be inferred from an empty array.');\n        }\n        const firstElementType = typeof arg0[0];\n        if (firstElementType === 'string') {\n          type = 'string';\n          data = arg0;\n        } else if (firstElementType === 'boolean') {\n          type = 'bool';\n          // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n          // wrong type. We use 'as any' to make it happy.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          data = Uint8Array.from(arg0 as any[]);\n        } else {\n          throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n        }\n      } else {\n        // get tensor type from TypedArray\n        const mappedType =\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor as SupportedTypedArrayConstructors);\n        if (mappedType === undefined) {\n          throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n        }\n        type = mappedType;\n        data = arg0 as SupportedTypedArray;\n      }\n    }\n\n    // type and data is processed, now processing dims\n    if (dims === undefined) {\n      // assume 1-D tensor if dims omitted\n      dims = [data.length];\n    } else if (!Array.isArray(dims)) {\n      throw new TypeError('A tensor\\'s dims must be a number array');\n    }\n\n    // perform check\n    const size = calculateSize(dims);\n    if (size !== data.length) {\n      throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n    }\n\n    this.dims = dims as readonly number[];\n    this.type = type;\n    this.data = data;\n    this.size = size;\n  }\n  // #endregion\n\n  // #region factory\n  static async fromImage(imageData: ImageData, options?: TensorFromImageDataOptions): Promise<Tensor>;\n  static async fromImage(imageElement: HTMLImageElement, options?: TensorFromImageElementOptions): Promise<Tensor>;\n  static async fromImage(bitmap: ImageBitmap, options: TensorFromImageBitmapOptions): Promise<Tensor>;\n  static async fromImage(urlSource: string, options?: TensorFromUrlOptions): Promise<Tensor>;\n\n  static async fromImage(\n      image: ImageData|HTMLImageElement|ImageBitmap|string,\n      options?: TensorFromImageDataOptions|TensorFromImageElementOptions|TensorFromImageBitmapOptions|\n      TensorFromUrlOptions): Promise<Tensor> {\n    return tensorFromImage(image, options);\n  }\n  // #endregion\n\n  // #region conversions\n  toDataURL(options?: TensorToDataUrlOptions): string {\n    return tensorToDataURL(this, options);\n  }\n\n  toImageData(options?: TensorToImageDataOptions): ImageData {\n    return tensorToImageData(this, options);\n  }\n  // #endregion\n\n  // #region fields\n  readonly dims: readonly number[];\n  readonly type: TensorType;\n  readonly data: TensorDataType;\n  readonly size: number;\n  // #endregion\n\n  // #region tensor utilities\n  reshape(dims: readonly number[]): Tensor {\n    return tensorReshape(this, dims);\n  }\n  // #endregion\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorFactory} from './tensor-factory.js';\nimport {Tensor as TensorImpl} from './tensor-impl.js';\nimport {TypedTensorUtils} from './tensor-utils.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/**\n * represent a basic tensor with specified dimensions and data type.\n */\ninterface TypedTensorBase<T extends Tensor.Type> {\n  /**\n   * Get the dimensions of the tensor.\n   */\n  readonly dims: readonly number[];\n  /**\n   * Get the data type of the tensor.\n   */\n  readonly type: T;\n  /**\n   * Get the buffer data of the tensor.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    float32: Float32Array;\n    uint8: Uint8Array;\n    int8: Int8Array;\n    uint16: Uint16Array;\n    int16: Int16Array;\n    int32: Int32Array;\n    int64: BigInt64Array;\n    string: string[];\n    bool: Uint8Array;\n    float16: Uint16Array;  // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: Float64Array;\n    uint32: Uint32Array;\n    uint64: BigUint64Array;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n  }\n\n  interface ElementTypeMap {\n    float32: number;\n    uint8: number;\n    int8: number;\n    uint16: number;\n    int16: number;\n    int32: number;\n    int64: bigint;\n    string: string;\n    bool: boolean;\n    float16: number;  // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: number;\n    uint32: number;\n    uint64: bigint;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface TypedTensor<T extends Tensor.Type> extends TypedTensorBase<T>, TypedTensorUtils<T> {}\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface Tensor extends TypedTensorBase<Tensor.Type>, TypedTensorUtils<Tensor.Type> {}\n\nexport interface TensorConstructor {\n  // #region specify element type\n  /**\n   * Construct a new string tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: 'string', data: Tensor.DataTypeMap['string']|readonly string[],\n      dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: 'bool', data: Tensor.DataTypeMap['bool']|readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new 64-bit integer typed tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new<T extends 'uint64'|'int64'>(\n      type: T, data: Tensor.DataTypeMap[T]|readonly bigint[]|readonly number[],\n      dims?: readonly number[]): TypedTensor<T>;\n\n  /**\n   * Construct a new numeric tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new<T extends Exclude<Tensor.Type, 'string'|'bool'|'uint64'|'int64'>>(\n      type: T, data: Tensor.DataTypeMap[T]|readonly number[], dims?: readonly number[]): TypedTensor<T>;\n  // #endregion\n\n  // #region infer element types\n\n  /**\n   * Construct a new float32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Float32Array, dims?: readonly number[]): TypedTensor<'float32'>;\n\n  /**\n   * Construct a new int8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int8Array, dims?: readonly number[]): TypedTensor<'int8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint8Array, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint16Array, dims?: readonly number[]): TypedTensor<'uint16'>;\n\n  /**\n   * Construct a new int16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int16Array, dims?: readonly number[]): TypedTensor<'int16'>;\n\n  /**\n   * Construct a new int32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int32Array, dims?: readonly number[]): TypedTensor<'int32'>;\n\n  /**\n   * Construct a new int64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: BigInt64Array, dims?: readonly number[]): TypedTensor<'int64'>;\n\n  /**\n   * Construct a new string tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: readonly string[], dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new float64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Float64Array, dims?: readonly number[]): TypedTensor<'float64'>;\n\n  /**\n   * Construct a new uint32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint32Array, dims?: readonly number[]): TypedTensor<'uint32'>;\n\n  /**\n   * Construct a new uint64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: BigUint64Array, dims?: readonly number[]): TypedTensor<'uint64'>;\n\n  // #endregion\n\n  // #region fall back to non-generic tensor type declaration\n\n  /**\n   * Construct a new tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: Tensor.Type, data: Tensor.DataType|readonly number[]|readonly string[]|readonly bigint[]|readonly boolean[],\n      dims?: readonly number[]): Tensor;\n\n  /**\n   * Construct a new tensor object from the given data and dims.\n   *\n   * @param data - Specify the tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Tensor.DataType, dims?: readonly number[]): Tensor;\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl as (TensorConstructor & TensorFactory);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from './tensor.js';\n\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nexport const calculateSize = (dims: readonly unknown[]): number => {\n  let size = 1;\n  for (let i = 0; i < dims.length; i++) {\n    const dim = dims[i];\n    if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n      throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n    }\n    if (dim < 0) {\n      throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n    }\n    size *= dim;\n  }\n  return size;\n};\n\n/**\n * implementation of Tensor.reshape()\n */\nexport const tensorReshape = (tensor: Tensor, dims: readonly number[]): Tensor =>\n    new Tensor(tensor.type, tensor.data, dims);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorToDataUrlOptions, TensorToImageDataOptions} from './tensor-conversion.js';\nimport {Tensor} from './tensor.js';\n\n/**\n * implementation of Tensor.toDataURL()\n */\nexport const tensorToDataURL = (tensor: Tensor, options?: TensorToDataUrlOptions): string => {\n  const canvas = document.createElement('canvas');\n  canvas.width = tensor.dims[3];\n  canvas.height = tensor.dims[2];\n  const pixels2DContext = canvas.getContext('2d');\n\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[3];\n    } else {  // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n    }\n\n    const inputformat = options?.format !== undefined ? options.format : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    // Default pointer assignments\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        const R = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0];  // R value\n        const G = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1];  // G value\n        const B = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2];  // B value\n        const A = aTensorPointer === -1 ?\n            255 :\n            ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3];  // A value\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n        pixels2DContext.fillRect(j, i, 1, 1);\n      }\n    }\n    return canvas.toDataURL();\n  } else {\n    throw new Error('Can not access image data');\n  }\n};\n\n/**\n * implementation of Tensor.toImageData()\n */\nexport const tensorToImageData = (tensor: Tensor, options?: TensorToImageDataOptions): ImageData => {\n  const pixels2DContext = document.createElement('canvas').getContext('2d');\n  let image: ImageData;\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    let channels: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[1];\n      channels = tensor.dims[3];\n    } else {  // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n      channels = tensor.dims[1];\n    }\n    const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    if (options !== undefined) {\n      if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n          (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n        throw new Error('Tensor format doesn\\'t match input tensor dims');\n      }\n    }\n\n    // Default pointer assignments\n    const step = 4;\n    let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    image = pixels2DContext.createImageData(width, height);\n\n    for (let i = 0; i < height * width;\n         rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n      image.data[rImagePointer] = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0];  // R value\n      image.data[gImagePointer] = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1];  // G value\n      image.data[bImagePointer] = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2];  // B value\n      image.data[aImagePointer] = aTensorPointer === -1 ?\n          255 :\n          ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3];  // A value\n    }\n\n  } else {\n    throw new Error('Can not access image data');\n  }\n  return image;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {resolveBackend} from './backend-impl.js';\nimport {SessionHandler} from './backend.js';\nimport {InferenceSession as InferenceSessionInterface} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {Tensor} from './tensor.js';\n\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype FeedsType = InferenceSessionInterface.FeedsType;\ntype FetchesType = InferenceSessionInterface.FetchesType;\ntype ReturnType = InferenceSessionInterface.ReturnType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  private constructor(handler: SessionHandler) {\n    this.handler = handler;\n  }\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async run(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    const fetches: {[name: string]: OnnxValue|null} = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n          '\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\n          }\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'options\\' must be an object.');\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of this.outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n    }\n\n    // check if all inputs are in feed\n    for (const name of this.inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of this.outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    // feeds, fetches and options are prepared\n\n    const results = await this.handler.run(feeds, fetches, options);\n    const returnValue: {[name: string]: OnnxValue} = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n      }\n    }\n    return returnValue;\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: SessionOptions):\n      Promise<InferenceSessionInterface>;\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static async create(\n      arg0: string|ArrayBufferLike|Uint8Array, arg1?: SessionOptions|number, arg2?: number,\n      arg3?: SessionOptions): Promise<InferenceSessionInterface> {\n    // either load from a file or buffer\n    let filePathOrUint8Array: string|Uint8Array;\n    let options: SessionOptions = {};\n\n    if (typeof arg0 === 'string') {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (arg0 instanceof Uint8Array) {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (\n        arg0 instanceof ArrayBuffer ||\n        (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n      const buffer = arg0;\n      let byteOffset = 0;\n      let byteLength = arg0.byteLength;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 === 'number') {\n        byteOffset = arg1;\n        if (!Number.isSafeInteger(byteOffset)) {\n          throw new RangeError('\\'byteOffset\\' must be an integer.');\n        }\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n        }\n        byteLength = arg0.byteLength - byteOffset;\n        if (typeof arg2 === 'number') {\n          byteLength = arg2;\n          if (!Number.isSafeInteger(byteLength)) {\n            throw new RangeError('\\'byteLength\\' must be an integer.');\n          }\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n          }\n          if (typeof arg3 === 'object' && arg3 !== null) {\n            options = arg3;\n          } else if (typeof arg3 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'byteLength\\' must be a number.');\n        }\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n    } else {\n      throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n    }\n\n    // get backend hints\n    const eps = options.executionProviders || [];\n    const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n    const backend = await resolveBackend(backendHints);\n    const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n    return new InferenceSession(handler);\n  }\n\n  startProfiling(): void {\n    this.handler.startProfiling();\n  }\n  endProfiling(): void {\n    this.handler.endProfiling();\n  }\n\n  get inputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get outputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  private handler: SessionHandler;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession as InferenceSessionImpl} from './inference-session-impl.js';\nimport {OnnxValue} from './onnx-value.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace InferenceSession {\n  // #region input/output types\n\n  type OnnxValueMapType = {readonly [name: string]: OnnxValue};\n  type NullableOnnxValueMapType = {readonly [name: string]: OnnxValue | null};\n\n  /**\n   * A feeds (model inputs) is an object that uses input names as keys and OnnxValue as corresponding values.\n   */\n  type FeedsType = OnnxValueMapType;\n\n  /**\n   * A fetches (model outputs) could be one of the following:\n   *\n   * - Omitted. Use model's output names definition.\n   * - An array of string indicating the output names.\n   * - An object that use output names as keys and OnnxValue or null as corresponding values.\n   *\n   * @remark\n   * different from input argument, in output, OnnxValue is optional. If an OnnxValue is present it will be\n   * used as a pre-allocated value by the inference engine; if omitted, inference engine will allocate buffer\n   * internally.\n   */\n  type FetchesType = readonly string[]|NullableOnnxValueMapType;\n\n  /**\n   * A inferencing return type is an object that uses output names as keys and OnnxValue as corresponding values.\n   */\n  type ReturnType = OnnxValueMapType;\n\n  // #endregion\n\n  // #region session options\n\n  /**\n   * A set of configurations for session behavior.\n   */\n  export interface SessionOptions {\n    /**\n     * An array of execution provider options.\n     *\n     * An execution provider option can be a string indicating the name of the execution provider,\n     * or an object of corresponding type.\n     */\n    executionProviders?: readonly ExecutionProviderConfig[];\n\n    /**\n     * The intra OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    intraOpNumThreads?: number;\n\n    /**\n     * The inter OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    interOpNumThreads?: number;\n\n    /**\n     * The optimization level.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    graphOptimizationLevel?: 'disabled'|'basic'|'extended'|'all';\n\n    /**\n     * Whether enable CPU memory arena.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableCpuMemArena?: boolean;\n\n    /**\n     * Whether enable memory pattern.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableMemPattern?: boolean;\n\n    /**\n     * Execution mode.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    executionMode?: 'sequential'|'parallel';\n\n    /**\n     * Optimized model file path.\n     *\n     * If this setting is specified, the optimized model will be dumped. In browser, a blob will be created\n     * with a pop-up window.\n     */\n    optimizedModelFilePath?: string;\n\n    /**\n     * Wether enable profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    enableProfiling?: boolean;\n\n    /**\n     * File prefix for profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    profileFilePrefix?: string;\n\n    /**\n     * Log ID.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logId?: string;\n\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0|1|2|3|4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Store configurations for a session. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_session_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     * ```js\n     * extra: {\n     *   session: {\n     *     set_denormal_as_zero: \"1\",\n     *     disable_prepacking: \"1\"\n     *   },\n     *   optimization: {\n     *     enable_gelu_approximation: \"1\"\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #region execution providers\n\n  // Currently, we have the following backends to support execution providers:\n  // Backend Node.js binding: supports 'cpu' and 'cuda'.\n  // Backend WebAssembly: supports 'cpu', 'wasm', 'xnnpack' and 'webnn'.\n  // Backend ONNX.js: supports 'webgl'.\n  // Backend React Native: supports 'cpu', 'xnnpack', 'coreml' (iOS), 'nnapi' (Android).\n  interface ExecutionProviderOptionMap {\n    cpu: CpuExecutionProviderOption;\n    cuda: CudaExecutionProviderOption;\n    wasm: WebAssemblyExecutionProviderOption;\n    webgl: WebGLExecutionProviderOption;\n    xnnpack: XnnpackExecutionProviderOption;\n    webnn: WebNNExecutionProviderOption;\n    coreml: CoreMLExecutionProviderOption;\n    nnapi: NnapiExecutionProviderOption;\n  }\n\n  type ExecutionProviderName = keyof ExecutionProviderOptionMap;\n  type ExecutionProviderConfig =\n      ExecutionProviderOptionMap[ExecutionProviderName]|ExecutionProviderOption|ExecutionProviderName|string;\n\n  export interface ExecutionProviderOption {\n    readonly name: string;\n  }\n  export interface CpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cpu';\n    useArena?: boolean;\n  }\n  export interface CudaExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cuda';\n    deviceId?: number;\n  }\n  export interface WebAssemblyExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'wasm';\n  }\n  export interface WebGLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgl';\n    // TODO: add flags\n  }\n  export interface XnnpackExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'xnnpack';\n  }\n  export interface WebNNExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webnn';\n    deviceType?: 'cpu'|'gpu';\n    powerPreference?: 'default'|'low-power'|'high-performance';\n  }\n  export interface CoreMLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'coreml';\n    useCPUOnly?: boolean;\n    enableOnSubgraph?: boolean;\n    onlyEnableDeviceWithANE?: boolean;\n  }\n  export interface NnapiExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'nnapi';\n    useFP16?: boolean;\n    useNCHW?: boolean;\n    cpuDisabled?: boolean;\n    cpuOnly?: boolean;\n  }\n  // #endregion\n\n  // #endregion\n\n  // #region run options\n\n  /**\n   * A set of configurations for inference run behavior\n   */\n  export interface RunOptions {\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0|1|2|3|4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Terminate all incomplete OrtRun calls as soon as possible if true\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    terminate?: boolean;\n\n    /**\n     * A tag for the Run() calls using this\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    tag?: string;\n\n    /**\n     * Set a single run configuration entry. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_run_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     *\n     * ```js\n     * extra: {\n     *   memory: {\n     *     enable_memory_arena_shrinkage: \"1\",\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #endregion\n\n  // #region value metadata\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface ValueMetadata {\n    // TBD\n  }\n\n  // #endregion\n}\n\n/**\n * Represent a runtime instance of an ONNX model.\n */\nexport interface InferenceSession {\n  // #region run()\n\n  /**\n   * Execute the model asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Execute the model asynchronously with the given feeds, fetches and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param fetches - Representation of the model output. See type description of `InferenceSession.OutputType` for\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n\n  // #endregion\n\n  // #region profiling\n\n  /**\n   * Start profiling.\n   */\n  startProfiling(): void;\n\n  /**\n   * End profiling.\n   */\n  endProfiling(): void;\n\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded model.\n   */\n  readonly inputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded model.\n   */\n  readonly outputNames: readonly string[];\n\n  // /**\n  //  * Get input metadata of the loaded model.\n  //  */\n  // readonly inputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // /**\n  //  * Get output metadata of the loaded model.\n  //  */\n  // readonly outputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // #endregion\n}\n\nexport interface InferenceSessionFactory {\n  // #region create()\n\n  /**\n   * Create a new inference session and load model asynchronously from an ONNX model file.\n   *\n   * @param uri - The URI or file path of the model to load.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(uri: string, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from segment of an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param byteOffset - The beginning of the specified portion of the array buffer.\n   * @param byteLength - The length in bytes of the array buffer.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from a Uint8Array.\n   *\n   * @param buffer - A Uint8Array representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession: InferenceSessionFactory = InferenceSessionImpl;\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","logLevelValue","env","wasm","webgl","webgpu","versions","common","logLevel","bufferToTensor","buffer","options","height","width","tensorLayout","norm","mean","bias","normMean","normBias","inputformat","format","outputformat","tensorFormat","stride","float32Data","Float32Array","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","constructor","arg0","arg1","arg2","type","data","dims","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","set","checkBigInt","Array","isArray","typedArrayConstructor","BigInt","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","this","static","image","async","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isString","bufferToTensorOptions","canvas","document","createElement","pixels2DContext","getContext","resizedHeight","resizedWidth","drawImage","getImageData","Promise","resolve","reject","context","newImage","Image","crossOrigin","src","onload","img","tempCanvas","putImageData","tensorFromImage","toDataURL","tensor","j","R","G","B","A","fillStyle","fillRect","tensorToDataURL","toImageData","channels","createImageData","tensorToImageData","reshape","tensorReshape","InferenceSession","handler","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","getOwnPropertyNames","v","inputNames","results","run","returnValue","dispose","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling"],"sourceRoot":""}